<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		">
	

	<!-- 配置数据源1 dataSourceUser-->
	<bean name="dataSourceUser" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="5" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="60" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="5" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 180秒，也就是3分钟 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="false" />
		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
	</bean>
	
	

	
	
	<!-- 这里还可以配置更多的数据源! -->
	
	<!-- 切换数据源统一bean -->
	<bean id="MyDataSourcePool" class="com.analyze.interceptor.DbcontextHolder"><!-- 这里写选择数据源的类地址 下面跟着给出-->
        <property name="defaultTargetDataSource" ref="dataSourceUser"/><!-- 设置默认为此dataSourceUser数据源-->
        <property name="targetDataSources">
            <map>
                <entry key="dataSourceUser" value-ref="dataSourceUser"/>
               <!--  <entry key="dataSourceCraw" value-ref="dataSourceCraw"/>
                <entry key="dataSourceGongJuXiang" value-ref="dataSourceGongJuXiang"/> -->
            </map>
        </property>
    </bean>
    
   <!-- 多数据源 aop,切换多个数据源 -->
    <bean id="DataSourceAspect" class="com.analyze.interceptor.DataSourceInterceptor" /><!-- 切面类 -->
    <aop:config>  
        <aop:advisor pointcut="execution(* com.analyze.service.impl.*.*(..))" advice-ref="DataSourceAspect" /><!-- 切入点s -->
    </aop:config>

	<!-- myBatis文件 -->
	<!-- This bean also let you use container transaction -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="MyDataSourcePool" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:com/analyze/dao/*.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.analyze.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
<!-- 事物管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="MyDataSourcePool" />
    </bean>
    <!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->  
    <tx:annotation-driven transaction-manager="transactionManager" />


</beans>